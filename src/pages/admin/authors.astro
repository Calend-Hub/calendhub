---
import AdminLayout from '../../layouts/AdminLayout.astro';
import ImagePicker from '../../components/admin/ImagePicker.astro';
import { getAuthors } from '../../lib/authors';

// Get all authors
const authors = await getAuthors();
---

<AdminLayout title="Author Profiles" activeNav="authors">
  <div class="p-8">
    <div class="max-w-6xl mx-auto space-y-6">
      <!-- Page Header -->
      <div class="flex justify-between items-center mb-8">
        <div>
          <h1 class="text-3xl font-bold">Author Profiles</h1>
          <p class="text-text-muted mt-2">Manage author profiles for your blog</p>
        </div>
        <button 
          id="add-author-btn"
          class="px-4 py-2 bg-text text-background rounded-lg hover:opacity-90 transition-opacity"
        >
          Add New Author
        </button>
      </div>

      <!-- Authors List -->
      <div class="bg-surface border border-border rounded-lg">
        <div class="px-6 py-4 border-b border-border">
          <h2 class="text-lg font-semibold">All Authors</h2>
          <p class="text-sm text-text-muted mt-1">Click on an author to edit their profile</p>
        </div>
        <div class="p-6">
          <div class="space-y-4">
            <!-- Add New Author Ghost Element -->
            <button
              id="add-author-btn"
              type="button"
              onclick="showAddAuthorModal()"
              class="w-full flex items-center justify-between p-4 bg-background rounded-lg border-2 border-dashed border-border hover:border-text transition-colors group"
            >
              <div class="flex items-center gap-4">
                <div class="w-12 h-12 rounded-full bg-surface border border-border flex items-center justify-center group-hover:bg-text group-hover:text-background transition-colors">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                </div>
                <div class="text-left">
                  <h3 class="font-semibold">Add New Author</h3>
                  <p class="text-sm text-text-muted">Click to create a new author profile</p>
                </div>
              </div>
              <svg class="w-5 h-5 text-text-muted group-hover:text-text transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
            
            <!-- Existing Authors -->
            {authors.map(author => (
                <div class="flex items-center justify-between p-4 bg-background rounded-lg border border-border hover:border-text transition-colors">
                  <div class="flex items-center gap-4">
                    <div class="w-12 h-12 rounded-full relative">
                      {author.avatar && (
                        <img 
                          src={author.avatar} 
                          alt={author.name}
                          class="w-12 h-12 rounded-full object-cover absolute inset-0"
                          onerror="this.style.display='none';"
                        />
                      )}
                      <div class="w-12 h-12 rounded-full bg-surface border border-border flex items-center justify-center">
                        <span class="text-lg font-semibold text-text-muted">
                          {author.name.split(' ').map(n => n[0]).join('')}
                        </span>
                      </div>
                    </div>
                    <div>
                      <h3 class="font-semibold">{author.name}</h3>
                      <p class="text-sm text-text-muted">{author.email}</p>
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <button 
                      class="px-3 py-1.5 text-sm border border-border rounded-lg hover:bg-surface transition-colors"
                      onclick={`editAuthor('${author.id}')`}
                    >
                      Edit
                    </button>
                    {author.id !== 'default' && (
                      <button 
                        class="px-3 py-1.5 text-sm border border-red-500 text-red-500 rounded-lg hover:bg-red-500/10 transition-colors"
                        onclick={`deleteAuthor('${author.id}')`}
                      >
                        Delete
                      </button>
                    )}
                  </div>
                </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Author Form Modal -->
  <div id="author-modal" class="hidden fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
    <div class="bg-surface rounded-lg border border-border max-w-3xl w-full max-h-[90vh] overflow-y-auto">
      <form id="author-form">
        <input type="hidden" id="author-id" name="id" />
        
        <!-- Modal Header -->
        <div class="px-6 py-4 border-b border-border flex justify-between items-center">
          <h2 class="text-xl font-bold" id="modal-title">Add New Author</h2>
          <button 
            type="button"
            id="close-modal"
            class="text-text-muted hover:text-text transition-colors"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <!-- Basic Information Section -->
        <div class="p-6 space-y-6">
          <div>
            <h3 class="text-lg font-semibold mb-4">Basic Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium mb-2">Name *</label>
                <input 
                  type="text" 
                  id="author-name" 
                  name="name" 
                  required 
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg focus:outline-none focus:border-text"
                  placeholder="John Doe"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium mb-2">Email *</label>
                <input 
                  type="email" 
                  id="author-email" 
                  name="email" 
                  required 
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg focus:outline-none focus:border-text"
                  placeholder="john@example.com"
                />
              </div>
            </div>
            
            <div class="mt-4">
              <label class="block text-sm font-medium mb-2">Bio</label>
              <textarea 
                id="author-bio" 
                name="bio" 
                rows="3" 
                class="w-full px-3 py-2 bg-background border border-border rounded-lg focus:outline-none focus:border-text"
                placeholder="A brief description about the author..."
              ></textarea>
            </div>
            
            <div class="mt-4">
              <label class="block text-sm font-medium mb-2">Avatar Image</label>
              <div class="flex items-center gap-4">
                <div id="avatar-preview">
                  <div class="w-24 h-24 rounded-full bg-surface border-2 border-border flex items-center justify-center">
                    <svg class="w-10 h-10 text-text-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                  </div>
                </div>
                <div>
                  <button
                    type="button"
                    onclick="window.openImagePicker('author-avatar', 'avatar')"
                    class="px-4 py-2 bg-text text-background rounded-lg hover:opacity-90 transition-opacity"
                  >
                    Choose Image
                  </button>
                  <input 
                    type="hidden" 
                    id="author-avatar" 
                    name="avatar" 
                    value=""
                  />
                </div>
              </div>
            </div>
          </div>

          <!-- Social Media Section -->
          <div class="border-t border-border pt-6">
            <h3 class="text-lg font-semibold mb-4">Social Media Links</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium mb-2">
                  <span class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                    </svg>
                    Twitter
                  </span>
                </label>
                <input 
                  type="text" 
                  id="author-twitter" 
                  name="twitter" 
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg focus:outline-none focus:border-text"
                  placeholder="username"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium mb-2">
                  <span class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                    </svg>
                    GitHub
                  </span>
                </label>
                <input 
                  type="text" 
                  id="author-github" 
                  name="github" 
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg focus:outline-none focus:border-text"
                  placeholder="username"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium mb-2">
                  <span class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
                    </svg>
                    LinkedIn
                  </span>
                </label>
                <input 
                  type="text" 
                  id="author-linkedin" 
                  name="linkedin" 
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg focus:outline-none focus:border-text"
                  placeholder="username"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium mb-2">
                  <span class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"/>
                    </svg>
                    Website
                  </span>
                </label>
                <input 
                  type="url" 
                  id="author-website" 
                  name="website" 
                  class="w-full px-3 py-2 bg-background border border-border rounded-lg focus:outline-none focus:border-text"
                  placeholder="https://example.com"
                />
              </div>
            </div>
          </div>
        </div>

        <!-- Form Actions -->
        <div class="px-6 py-4 border-t border-border flex gap-3 justify-end">
          <button 
            type="button"
            id="cancel-btn"
            class="px-4 py-2 border border-border rounded-lg hover:bg-background transition-colors"
          >
            Cancel
          </button>
          <button 
            type="submit"
            class="px-4 py-2 bg-text text-background rounded-lg hover:opacity-90 transition-opacity"
          >
            <span id="submit-text">Add Author</span>
          </button>
        </div>
      </form>
    </div>
  </div>

  <script define:vars={{ authorsData: authors }}>
    // Authors data
    let authors = authorsData || [];

    // Modal elements
    const modal = document.getElementById('author-modal');
    const modalTitle = document.getElementById('modal-title');
    const form = document.getElementById('author-form');
    const submitText = document.getElementById('submit-text');
    const addBtn = document.getElementById('add-author-btn');
    const closeBtn = document.getElementById('close-modal');
    const cancelBtn = document.getElementById('cancel-btn');

    // Form fields
    const idField = document.getElementById('author-id');
    const nameField = document.getElementById('author-name');
    const emailField = document.getElementById('author-email');
    const bioField = document.getElementById('author-bio');
    const avatarField = document.getElementById('author-avatar');
    const twitterField = document.getElementById('author-twitter');
    const githubField = document.getElementById('author-github');
    const linkedinField = document.getElementById('author-linkedin');
    const websiteField = document.getElementById('author-website');

    // Show modal
    function showModal(title = 'Add New Author', submitLabel = 'Add Author') {
      if (modal && modalTitle && submitText) {
        modalTitle.textContent = title;
        submitText.textContent = submitLabel;
        modal.classList.remove('hidden');
      }
    }

    // Hide modal
    function hideModal() {
      if (modal) {
        modal.classList.add('hidden');
        form?.reset();
        updateAvatarPreview('');
      }
    }

    // Update avatar preview
    function updateAvatarPreview(url) {
      const previewContainer = document.getElementById('avatar-preview');
      if (!previewContainer) return;
      
      if (url) {
        previewContainer.innerHTML = `
          <img 
            src="${url}" 
            alt="Avatar preview" 
            class="w-24 h-24 rounded-full object-cover border-2 border-border"
          />
        `;
      } else {
        previewContainer.innerHTML = `
          <div class="w-24 h-24 rounded-full bg-surface border-2 border-border flex items-center justify-center">
            <svg class="w-10 h-10 text-text-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
        `;
      }
    }
    
    // Make updateAvatarPreview globally available for the image picker
    window.updateAvatarPreview = updateAvatarPreview;
    
    // Make showModal globally available
    window.showAddAuthorModal = function() {
      showModal('Add New Author', 'Add Author');
    };

    // Watch for avatar field changes
    if (avatarField) {
      // Create a MutationObserver to watch for value changes
      const observer = new MutationObserver(() => {
        updateAvatarPreview(avatarField.value);
      });
      
      observer.observe(avatarField, {
        attributes: true,
        attributeFilter: ['value']
      });
      
      // Also watch for direct value changes
      Object.defineProperty(avatarField, 'value', {
        get() {
          return this.getAttribute('value') || '';
        },
        set(newValue) {
          this.setAttribute('value', newValue);
          updateAvatarPreview(newValue);
        }
      });
    }

    // Add author button
    addBtn?.addEventListener('click', () => {
      showModal();
    });

    // Close buttons
    closeBtn?.addEventListener('click', hideModal);
    cancelBtn?.addEventListener('click', hideModal);
    
    // Click outside modal
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        hideModal();
      }
    });

    // Edit author
    window.editAuthor = function(id) {
      const author = authors.find(a => a.id === id);
      if (!author) return;

      // Fill form
      if (idField) idField.value = author.id;
      if (nameField) nameField.value = author.name;
      if (emailField) emailField.value = author.email;
      if (bioField) bioField.value = author.bio || '';
      if (avatarField) {
        avatarField.value = author.avatar || '';
        updateAvatarPreview(author.avatar || '');
      }
      if (twitterField) twitterField.value = author.social?.twitter || '';
      if (githubField) githubField.value = author.social?.github || '';
      if (linkedinField) linkedinField.value = author.social?.linkedin || '';
      if (websiteField) websiteField.value = author.social?.website || '';

      showModal('Edit Author', 'Update Author');
    }

    // Delete author
    window.deleteAuthor = async function(id) {
      const author = authors.find(a => a.id === id);
      if (!author) return;

      if (!confirm(`Are you sure you want to delete ${author.name}? This action cannot be undone.`)) {
        return;
      }

      try {
        const response = await fetch('/api/authors', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id })
        });

        if (response.ok) {
          window.location.reload();
        } else {
          const error = await response.json();
          alert('Failed to delete author: ' + (error.message || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error deleting author:', error);
        alert('Failed to delete author. Please try again.');
      }
    }

    // Form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const id = formData.get('id') || '';
      
      const authorData = {
        id: id || `author-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        name: formData.get('name'),
        email: formData.get('email'),
        bio: formData.get('bio') || '',
        avatar: formData.get('avatar') || '',
        social: {
          twitter: formData.get('twitter') || '',
          github: formData.get('github') || '',
          linkedin: formData.get('linkedin') || '',
          website: formData.get('website') || ''
        }
      };

      try {
        const response = await fetch('/api/authors', {
          method: id ? 'PUT' : 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(authorData)
        });

        if (response.ok) {
          window.location.reload();
        } else {
          const error = await response.json();
          alert('Failed to save author: ' + (error.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error saving author:', error);
        alert('Failed to save author. Please try again.');
      }
    });
  </script>
  
  <ImagePicker />
</AdminLayout>