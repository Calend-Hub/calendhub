---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { formatDate } from '../../lib/utils';
import { getCategories } from '../../lib/data';
import { getAllBlogPosts } from '../../lib/posts';

// Get all posts from both locations
const allPosts = await getAllBlogPosts();
const sortedPosts = allPosts.sort((a, b) => 
  b.data.publishDate.valueOf() - a.data.publishDate.valueOf()
);

// Filter options from URL params
const url = new URL(Astro.request.url);
const filterStatus = url.searchParams.get('status') || 'all';
const filterCategory = url.searchParams.get('category') || 'all';

// Apply filters
let filteredPosts = sortedPosts;
if (filterStatus === 'published') {
  filteredPosts = filteredPosts.filter(p => !p.data.draft);
} else if (filterStatus === 'draft') {
  filteredPosts = filteredPosts.filter(p => p.data.draft);
}

if (filterCategory !== 'all') {
  filteredPosts = filteredPosts.filter(p => p.data.category === filterCategory);
}

// Get categories from JSON file
const categoriesData = await getCategories();
const categories = categoriesData.map(cat => cat.name);
---

<AdminLayout title="Manage Posts" activeNav="posts">
  <div class="p-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold mb-2">Posts</h1>
      <p class="text-text-muted">Manage all your blog posts</p>
    </div>

    <!-- Enhanced Filter Bar -->
    <div class="bg-surface border border-border rounded-lg overflow-hidden mb-6">
      <!-- Top Bar with Add Button -->
      <div class="border-b border-border p-4 bg-background/50">
        <div class="flex items-center justify-between">
          <a href="/admin/new" class="inline-flex items-center gap-2 px-4 py-2 bg-text text-background rounded-lg hover:opacity-90 transition-all">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            <span class="font-medium">New Post</span>
          </a>
          <div class="flex items-center gap-6">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-text rounded-full"></div>
              <span class="text-sm font-medium">{filteredPosts.filter(p => !p.data.draft).length} Published</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-surface border border-border rounded-full"></div>
              <span class="text-sm font-medium">{filteredPosts.filter(p => p.data.draft).length} Drafts</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-border rounded-full"></div>
              <span class="text-sm font-medium">{filteredPosts.length} Total</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Filter Controls -->
      <div class="p-4">
        <div class="flex flex-wrap items-end gap-4">
          <div class="flex-1 min-w-[200px]">
            <label class="text-xs font-semibold uppercase tracking-wider text-text-muted mb-2 block">Filter by Status</label>
            <select 
              id="status-filter"
              class="w-full px-4 py-2 bg-background border border-border rounded-lg text-sm focus:outline-none focus:border-text transition-colors"
            >
              <option value="all" selected={filterStatus === 'all'}>All Posts</option>
              <option value="published" selected={filterStatus === 'published'}>Published Only</option>
              <option value="draft" selected={filterStatus === 'draft'}>Drafts Only</option>
            </select>
          </div>
          <div class="flex-1 min-w-[200px]">
            <label class="text-xs font-semibold uppercase tracking-wider text-text-muted mb-2 block">Filter by Category</label>
            <select 
              id="category-filter"
              class="w-full px-4 py-2 bg-background border border-border rounded-lg text-sm focus:outline-none focus:border-text transition-colors"
            >
              <option value="all" selected={filterCategory === 'all'}>All Categories</option>
              {categories.map(cat => (
                <option value={cat} selected={filterCategory === cat}>{cat}</option>
              ))}
            </select>
          </div>
          <button
            id="clear-filters"
            class="px-4 py-2 border border-border rounded-lg text-sm hover:bg-background transition-colors"
          >
            Clear Filters
          </button>
        </div>
      </div>
    </div>

    <!-- Posts Table -->
    <div class="bg-surface border border-border rounded-lg overflow-hidden">
      <table class="w-full">
        <thead>
          <tr class="border-b border-border">
            <th class="text-left p-4 text-sm font-medium">Title</th>
            <th class="text-left p-4 text-sm font-medium">Author</th>
            <th class="text-left p-4 text-sm font-medium">Category</th>
            <th class="text-left p-4 text-sm font-medium">Status</th>
            <th class="text-left p-4 text-sm font-medium">Date</th>
            <th class="text-left p-4 text-sm font-medium">Actions</th>
          </tr>
        </thead>
        <tbody>
          {filteredPosts.length > 0 ? (
            filteredPosts.map((post) => (
              <tr class="border-t border-border hover:bg-border/20 transition-colors">
                <td class="p-4">
                  <div>
                    <div class="font-medium">{post.data.title}</div>
                    <div class="text-sm text-text-muted line-clamp-1 mt-1">{post.data.description}</div>
                  </div>
                </td>
                <td class="p-4 text-sm">{post.data.author}</td>
                <td class="p-4">
                  <span class="text-sm px-2 py-1 bg-background border border-border rounded">
                    {post.data.category}
                  </span>
                </td>
                <td class="p-4">
                  <div class="flex items-center gap-2">
                    {post.data.draft ? (
                      <span class="text-xs px-2 py-1 bg-surface border border-border rounded">Draft</span>
                    ) : (
                      <span class="text-xs px-2 py-1 bg-text text-background rounded">Published</span>
                    )}
                    {post.data.featured && (
                      <span class="text-xs px-2 py-1 bg-surface border border-text rounded">Featured</span>
                    )}
                  </div>
                </td>
                <td class="p-4 text-sm text-text-muted">
                  {formatDate(post.data.publishDate)}
                </td>
                <td class="p-4">
                  <div class="flex items-center gap-3">
                    <a href={`/blog/${post.slug}`} target="_blank" class="text-sm hover:text-text-muted transition-colors">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                    </a>
                    <a href={`/admin/edit/${post.slug}`} class="text-sm hover:text-text-muted transition-colors">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                      </svg>
                    </a>
                    <button 
                      onclick={`deletePost('${post.slug}', '${post.data.title.replace(/'/g, "\\'")}')`}
                      class="text-sm hover:text-red-500 transition-colors"
                      type="button"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colspan="6" class="p-8 text-center text-text-muted">
                No posts found with the selected filters.
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="fixed inset-0 bg-black/50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-surface rounded-xl p-6 max-w-md w-full">
        <h3 class="text-xl font-bold mb-4">Delete Post</h3>
        <p class="text-text-muted mb-6">
          Are you sure you want to delete "<span id="delete-post-title"></span>"? This action cannot be undone.
        </p>
        <div class="flex gap-3 justify-end">
          <button 
            onclick="closeDeleteModal()"
            class="px-4 py-2 border border-border rounded-lg hover:bg-background transition-colors"
          >
            Cancel
          </button>
          <button 
            id="confirm-delete-btn"
            class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
          >
            Delete Post
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Get filter elements
    const statusFilter = document.getElementById('status-filter') as HTMLSelectElement;
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
    const clearButton = document.getElementById('clear-filters');

    // Function to update URL with filter parameters
    function updateFilters() {
      const status = statusFilter?.value || 'all';
      const category = categoryFilter?.value || 'all';
      
      const params = new URLSearchParams();
      if (status !== 'all') params.set('status', status);
      if (category !== 'all') params.set('category', category);
      
      const queryString = params.toString();
      const newUrl = queryString ? `/admin/posts?${queryString}` : '/admin/posts';
      
      window.location.href = newUrl;
    }

    // Add event listeners
    statusFilter?.addEventListener('change', updateFilters);
    categoryFilter?.addEventListener('change', updateFilters);
    
    clearButton?.addEventListener('click', () => {
      window.location.href = '/admin/posts';
    });

    // Delete functionality
    let deleteSlug = '';
    
    window.deletePost = function(slug: string, title: string) {
      deleteSlug = slug;
      const modal = document.getElementById('delete-modal');
      const titleSpan = document.getElementById('delete-post-title');
      
      if (modal && titleSpan) {
        titleSpan.textContent = title;
        modal.classList.remove('hidden');
      }
    }
    
    window.closeDeleteModal = function() {
      const modal = document.getElementById('delete-modal');
      if (modal) {
        modal.classList.add('hidden');
      }
      deleteSlug = '';
    }
    
    // Confirm delete button
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    if (confirmDeleteBtn) {
      confirmDeleteBtn.addEventListener('click', async () => {
        if (!deleteSlug) return;
        
        confirmDeleteBtn.textContent = 'Deleting...';
        confirmDeleteBtn.setAttribute('disabled', 'true');
        
        try {
          const response = await fetch('/api/posts/delete', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ slug: deleteSlug })
          });
          
          const result = await response.json();
          
          if (response.ok) {
            // Reload the page to show updated list
            window.location.reload();
          } else {
            alert('Failed to delete post: ' + (result.error || 'Unknown error'));
            confirmDeleteBtn.textContent = 'Delete Post';
            confirmDeleteBtn.removeAttribute('disabled');
          }
        } catch (error) {
          console.error('Error deleting post:', error);
          alert('Failed to delete post. Please try again.');
          confirmDeleteBtn.textContent = 'Delete Post';
          confirmDeleteBtn.removeAttribute('disabled');
        }
      });
    }
    
    // Close modal when clicking outside
    const deleteModal = document.getElementById('delete-modal');
    if (deleteModal) {
      deleteModal.addEventListener('click', (e) => {
        if (e.target === deleteModal) {
          closeDeleteModal();
        }
      });
    }
  </script>
</AdminLayout>