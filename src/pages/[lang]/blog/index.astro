---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import PostCard from '../../../components/blog/PostCard.astro';
import { sortPostsByDate } from '../../../lib/utils';
import { SITE_CONFIG } from '../../../data/site-config';
import { getCategories, getTags } from '../../../lib/data';
import { getPublishedBlogPosts } from '../../../lib/posts';
import { normalizeTagName } from '../../../lib/tags';
import { SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, isValidLanguage, getLanguagePrefix } from '../../../config/languages';

// Enable prerendering for this page
export const prerender = true;

// Static paths for all supported languages (except default/English)
export async function getStaticPaths() {
  const paths = [];
  const languages = SUPPORTED_LANGUAGES.filter(lang => lang !== DEFAULT_LANGUAGE);

  for (const lang of languages) {
    paths.push({
      params: { lang }
    });
  }

  return paths;
}

// Get the language from the URL
const { lang } = Astro.params;

// Validate language
if (!isValidLanguage(lang)) {
  return new Response(null, {
    status: 404,
    statusText: 'Language not supported'
  });
}

// Get all non-draft posts for this language
const allPosts = await getPublishedBlogPosts(lang);

// Sort posts: featured first, then by date
const sortedPosts = sortPostsByDate(allPosts).sort((a, b) => {
  // Featured posts come first
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  // Then sort by date (already sorted by sortPostsByDate)
  return 0;
});

// Pagination settings
const POSTS_PER_PAGE = 15;
const currentPage = 1;
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
const paginatedPosts = sortedPosts.slice(0, POSTS_PER_PAGE);

const featuredPosts = sortedPosts.filter(post => post.data.featured);
const latestPost = sortedPosts.length > 0 ? sortedPosts[0] : null;
const recentPosts = sortedPosts.slice(1, 7);

// Get categories from data
const categoriesData = await getCategories();
const categories = categoriesData.map(cat => cat.name);

// Get tags from data and count their usage with normalization
const tagsData = await getTags();
const allPostTags = allPosts.flatMap(post => post.data.tags || []);

// Create normalized tag counts
const normalizedTagCounts = new Map();
allPostTags.forEach(tag => {
  const normalized = normalizeTagName(tag);
  normalizedTagCounts.set(normalized, (normalizedTagCounts.get(normalized) || 0) + 1);
});

// Get all tags and sort by usage using normalized matching
const popularTags = tagsData
  .map(tag => ({
    name: tag.name, // Use the canonical name from JSON file
    count: normalizedTagCounts.get(normalizeTagName(tag.name)) || 0
  }))
  .filter(tag => tag.count > 0) // Only show tags that are actually used
  .sort((a, b) => b.count - a.count)
  .slice(0, 10)
  .map(tag => tag.name);

// Stats
const totalPosts = allPosts.length;
const totalCategories = categories.length;

const languagePrefix = getLanguagePrefix(lang);

// Translations for UI elements
const translations = {
  es: {
    siteTitle: "Blog de CalendHub",
    siteDescription: "Tutoriales expertos sobre modelos de IA de código abierto, flujos de trabajo de ComfyUI, LLMs, generación de imagen/video/audio y programación. Aprenda técnicas de vanguardia para aplicaciones creativas de IA.",
    categories: "Categorías",
    popularTags: "Etiquetas Populares",
    stats: "Estadísticas",
    totalArticles: "Total de Artículos",
    tags: "Etiquetas",
    featuredArticles: "Artículos Destacados",
    readMore: "Leer más →",
    featured: "DESTACADO"
  },
  fr: {
    siteTitle: "Blog CalendHub",
    siteDescription: "Tutoriels d'experts sur les modèles d'IA open source, les workflows ComfyUI, les LLMs, la génération d'image/vidéo/audio et la programmation. Apprenez des techniques de pointe pour les applications créatives d'IA.",
    categories: "Catégories",
    popularTags: "Tags Populaires",
    stats: "Statistiques",
    totalArticles: "Total des Articles",
    tags: "Tags",
    featuredArticles: "Articles en Vedette",
    readMore: "Lire la suite →",
    featured: "EN VEDETTE"
  },
  de: {
    siteTitle: "CalendHub Blog",
    siteDescription: "Expertentutorials zu Open-Source-KI-Modellen, ComfyUI-Workflows, LLMs, Bild-/Video-/Audiogenerierung und Programmierung. Lernen Sie modernste Techniken für kreative KI-Anwendungen.",
    categories: "Kategorien",
    popularTags: "Beliebte Tags",
    stats: "Statistiken",
    totalArticles: "Artikel Gesamt",
    tags: "Tags",
    featuredArticles: "Empfohlene Artikel",
    readMore: "Weiterlesen →",
    featured: "EMPFOHLEN"
  },
  ja: {
    siteTitle: "CalendHub ブログ",
    siteDescription: "オープンソースAIモデル、ComfyUIワークフロー、LLM、画像/動画/音声生成、プログラミングに関する専門家向けチュートリアル。クリエイティブなAIアプリケーションのための最先端技術を学びます。",
    categories: "カテゴリ",
    popularTags: "人気タグ",
    stats: "統計",
    totalArticles: "記事総数",
    tags: "タグ",
    featuredArticles: "注目記事",
    readMore: "続きを読む →",
    featured: "注目"
  },
  ko: {
    siteTitle: "CalendHub 블로그",
    siteDescription: "오픈 소스 AI 모델, ComfyUI 워크플로우, LLM, 이미지/비디오/오디오 생성 및 프로그래밍에 대한 전문가 튜토리얼. 창의적인 AI 애플리케이션을 위한 최첨단 기술을 배우세요.",
    categories: "카테고리",
    popularTags: "인기 태그",
    stats: "통계",
    totalArticles: "총 기사 수",
    tags: "태그",
    featuredArticles: "추천 기사",
    readMore: "더 읽기 →",
    featured: "추천"
  },
  zh: {
    siteTitle: "CalendHub 博客",
    siteDescription: "关于开源AI模型、ComfyUI工作流程、LLM、图像/视频/音频生成和编程的专家教程。学习创意AI应用的尖端技术。",
    categories: "分类",
    popularTags: "热门标签",
    stats: "统计",
    totalArticles: "文章总数",
    tags: "标签",
    featuredArticles: "精选文章",
    readMore: "阅读更多 →",
    featured: "精选"
  }
};

const t = translations[lang] || translations.en;
---

<BaseLayout
  title={t.siteTitle}
  description={t.siteDescription}
  siteName={t.siteTitle}
  currentLanguage={lang}
  pageType="blog-index"
>
  <div class="min-h-screen">
    <!-- Compact Blog Header -->
    <section class="py-12">
      <div class="container">
        <div class="max-w-4xl">
          <h1 class="text-5xl md:text-6xl font-display font-bold mb-3">
            {t.siteTitle}
          </h1>
          <p class="text-lg text-text-muted">
            {t.siteDescription}
          </p>
        </div>
      </div>
    </section>

    <!-- Main Blog Layout -->
    <section class="py-12">
      <div class="container">
        <div class="grid lg:grid-cols-[1fr,320px] gap-12">
          <!-- Left Column - Blog Posts -->
          <div>
            <!-- All Posts List -->
            {paginatedPosts.length > 0 ? (
              <div class="space-y-8">
                {paginatedPosts.map((post) => (
                <article class="border-b pb-8">
                  <a href={`${languagePrefix}/blog/${post.slug}`} class="block group">
                    <div class="grid md:grid-cols-[160px,1fr] gap-4">
                      {post.data.heroImage && (
                        <div class="overflow-hidden rounded-lg aspect-[16/9] md:aspect-[4/3] bg-surface">
                          <img
                            src={post.data.heroImage}
                            alt={post.data.heroImageAlt || post.data.title}
                            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                          />
                        </div>
                      )}

                      <div class={post.data.heroImage ? "" : "md:col-span-2"}>
                        <div class="flex items-center gap-2 text-xs text-text-muted mb-2">
                          <span class="font-bold uppercase">{post.data.category}</span>
                          <span>•</span>
                          <time datetime={post.data.publishDate.toISOString()}>
                            {new Date(post.data.publishDate).toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric'
                            })}
                          </time>
                          {post.data.featured && (
                            <>
                              <span>•</span>
                              <span class="px-2 py-0.5 bg-text text-background text-xs rounded">{t.featured}</span>
                            </>
                          )}
                        </div>

                        <h2 class="text-xl font-semibold mb-2 group-hover:opacity-70 transition-opacity">
                          {post.data.title}
                        </h2>

                        <p class="text-sm text-text-muted mb-3 line-clamp-2">
                          {post.data.description}
                        </p>

                        <div class="flex items-center justify-between">
                          <div class="flex flex-wrap gap-2">
                            {(post.data.tags || []).slice(0, 3).map((tag) => (
                              <span class="text-xs text-text-muted">
                                #{tag}
                              </span>
                            ))}
                          </div>
                          <span class="text-xs text-text-muted group-hover:text-text transition-colors">
                            {t.readMore}
                          </span>
                        </div>
                      </div>
                    </div>
                  </a>
                </article>
                ))}
              </div>
            ) : (
              <div class="text-center py-12">
                <p class="text-text-muted text-lg">No blog posts available in this language yet.</p>
              </div>
            )}

            <!-- Pagination -->
            {totalPages > 1 && (
              <div class="flex justify-center gap-2 mt-12">
                {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNum => (
                  <a
                    href={pageNum === 1 ? `${languagePrefix}/blog` : `${languagePrefix}/blog/page/${pageNum}`}
                    class={`px-4 py-2 rounded ${currentPage === pageNum ? 'bg-primary text-white' : 'bg-surface text-text hover:bg-surface-hover'}`}
                  >
                    {pageNum}
                  </a>
                ))}
              </div>
            )}
          </div>

          <!-- Right Column - Sidebar -->
          <aside class="space-y-8 lg:sticky lg:top-8 lg:h-fit">
            <!-- Categories -->
            <div>
              <h3 class="text-sm font-bold uppercase mb-4">{t.categories}</h3>
              <div class="space-y-2">
                {categoriesData.map((category) => {
                  const count = allPosts.filter(p => p.data.category === category.name).length;
                  return (
                    <a href={`${languagePrefix}/blog/category/${category.slug}`} class="flex items-center justify-between py-2 px-3 border border-border rounded-full hover:bg-surface transition-colors">
                      <span class="text-sm">{category.name}</span>
                      <span class="text-xs text-text-muted">{count}</span>
                    </a>
                  );
                })}
              </div>
            </div>

            <!-- Popular Tags -->
            <div>
              <h3 class="text-sm font-bold uppercase mb-4">{t.popularTags}</h3>
              <div class="flex flex-wrap gap-2">
                {popularTags.map((tag) => (
                  <a href={`${languagePrefix}/blog/tag/${normalizeTagName(tag)}`} class="px-3 py-1 text-sm border border-border rounded-full hover:bg-text hover:text-background transition-all">
                    #{tag}
                  </a>
                ))}
              </div>
            </div>

            <!-- Stats -->
            <div class="border-t pt-8">
              <h3 class="text-sm font-bold uppercase mb-4">{t.stats}</h3>
              <div class="space-y-3">
                <div class="flex justify-between">
                  <span class="text-sm text-text-muted">{t.totalArticles}</span>
                  <span class="text-sm font-medium">{totalPosts}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-text-muted">{t.categories}</span>
                  <span class="text-sm font-medium">{totalCategories}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-text-muted">{t.tags}</span>
                  <span class="text-sm font-medium">{tagsData.length}</span>
                </div>
              </div>
            </div>

            <!-- Featured Posts -->
            {featuredPosts.length > 0 && (
              <div class="border-t pt-8">
                <h3 class="text-sm font-bold uppercase mb-4">{t.featuredArticles}</h3>
                <div class="space-y-4">
                  {featuredPosts.slice(0, 1).map((post) => (
                    <a href={`${languagePrefix}/blog/${post.slug}`} class="block group">
                      <div class="border border-border rounded-xl overflow-hidden hover:bg-surface transition-colors">
                        {post.data.heroImage && (
                          <div class="aspect-video overflow-hidden">
                            <img
                              src={post.data.heroImage}
                              alt={post.data.heroImageAlt || post.data.title}
                              class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                            />
                          </div>
                        )}
                        <div class="p-4">
                          <div class="text-xs text-text-muted mb-2">
                            {post.data.category}
                          </div>
                          <h3 class="text-sm font-semibold mb-2 group-hover:opacity-70 transition-opacity">
                            {post.data.title}
                          </h3>
                          <p class="text-xs text-text-muted line-clamp-3">
                            {post.data.description}
                          </p>
                        </div>
                      </div>
                    </a>
                  ))}
                </div>
              </div>
            )}
          </aside>
        </div>
      </div>
    </section>
  </div>
</BaseLayout>
