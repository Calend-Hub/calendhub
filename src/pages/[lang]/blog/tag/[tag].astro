---
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import { sortPostsByDate, formatDate } from '../../../../lib/utils';
import { SITE_CONFIG } from '../../../../data/site-config';
import { getPublishedBlogPosts } from '../../../../lib/posts';
import { getTags } from '../../../../lib/data';
import { normalizeTagName } from '../../../../lib/tags';
import { SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, isValidLanguage, getLanguagePrefix } from '../../../../config/languages';

// Enable prerendering for this page
export const prerender = true;

// Static paths for all tags in all languages
export async function getStaticPaths() {
  const paths = [];

  // Get all supported languages except default (English)
  const languages = SUPPORTED_LANGUAGES.filter(lang => lang !== DEFAULT_LANGUAGE);

  for (const lang of languages) {
    const allPosts = await getPublishedBlogPosts(lang);
    const tags = [...new Set(allPosts.flatMap(post => post.data.tags || []))]
      .filter(tag => tag && tag.trim()); // Filter out empty/undefined tags

    for (const tag of tags) {
      const normalizedTag = normalizeTagName(tag);
      if (normalizedTag) { // Only add if normalized tag is not empty
        paths.push({
          params: {
            lang,
            tag: normalizedTag
          }
        });
      }
    }
  }

  return paths;
}

// Get the language and tag from URL parameter
const { lang, tag: urlTag } = Astro.params;

// Validate language
if (!isValidLanguage(lang)) {
  return new Response(null, {
    status: 404,
    statusText: 'Language not supported'
  });
}

// Get all posts and find matching posts for this language
const allPosts = await getPublishedBlogPosts(lang);
const postsWithTag = allPosts.filter(post =>
  (post.data.tags || []).some(postTag => normalizeTagName(postTag) === urlTag)
);

const sortedPosts = sortPostsByDate(postsWithTag);

// Get tags from JSON file for canonical names
const tagsData = await getTags();

// Get all tags for sidebar with normalized counting
const allTags = allPosts.flatMap(post => post.data.tags);
const normalizedTagCounts = new Map();
allTags.forEach(tag => {
  const normalized = normalizeTagName(tag);
  normalizedTagCounts.set(normalized, (normalizedTagCounts.get(normalized) || 0) + 1);
});

// Get popular tags using canonical names from JSON file
const popularTags = tagsData
  .map(tag => ({
    name: tag.name, // Use the canonical name from JSON file
    count: normalizedTagCounts.get(normalizeTagName(tag.name)) || 0
  }))
  .filter(tag => tag.count > 0) // Only show tags that are actually used
  .sort((a, b) => b.count - a.count)
  .slice(0, 20)
  .map(tag => tag.name);

// Format tag name for display (find the original case)
const tagDisplay = allTags.find(t => normalizeTagName(t) === urlTag) || urlTag;

const languagePrefix = getLanguagePrefix(lang);

// Translations for UI elements
const translations = {
  es: {
    articlesTagged: "Artículos etiquetados",
    article: "artículo",
    articles: "artículos",
    withThisTag: "con esta etiqueta",
    tag: "Etiqueta",
    backToAllBlogs: "Volver a Todos los Blogs",
    popularTags: "Etiquetas Populares",
    tagStats: "Estadísticas de Etiqueta",
    articlesWithTag: "Artículos con etiqueta",
    totalTags: "Etiquetas totales",
    mostUsedTag: "Etiqueta más usada",
    readMore: "Leer más →",
    featured: "DESTACADO",
    noArticles: "No se encontraron artículos con esta etiqueta."
  },
  fr: {
    articlesTagged: "Articles tagués",
    article: "article",
    articles: "articles",
    withThisTag: "avec ce tag",
    tag: "Tag",
    backToAllBlogs: "Retour à Tous les Blogs",
    popularTags: "Tags Populaires",
    tagStats: "Statistiques de Tag",
    articlesWithTag: "Articles avec tag",
    totalTags: "Total des tags",
    mostUsedTag: "Tag le plus utilisé",
    readMore: "Lire la suite →",
    featured: "EN VEDETTE",
    noArticles: "Aucun article trouvé avec ce tag."
  },
  de: {
    articlesTagged: "Artikel getaggt",
    article: "Artikel",
    articles: "Artikel",
    withThisTag: "mit diesem Tag",
    tag: "Tag",
    backToAllBlogs: "Zurück zu Allen Blogs",
    popularTags: "Beliebte Tags",
    tagStats: "Tag-Statistiken",
    articlesWithTag: "Artikel mit Tag",
    totalTags: "Tags Gesamt",
    mostUsedTag: "Meistgenutzter Tag",
    readMore: "Weiterlesen →",
    featured: "EMPFOHLEN",
    noArticles: "Keine Artikel mit diesem Tag gefunden."
  },
  ja: {
    articlesTagged: "タグ付き記事",
    article: "記事",
    articles: "記事",
    withThisTag: "このタグを持つ",
    tag: "タグ",
    backToAllBlogs: "すべてのブログに戻る",
    popularTags: "人気タグ",
    tagStats: "タグ統計",
    articlesWithTag: "タグ付き記事",
    totalTags: "タグ総数",
    mostUsedTag: "最も使用されたタグ",
    readMore: "続きを読む →",
    featured: "注目",
    noArticles: "このタグの記事が見つかりません。"
  },
  ko: {
    articlesTagged: "태그된 기사",
    article: "기사",
    articles: "기사",
    withThisTag: "이 태그를 가진",
    tag: "태그",
    backToAllBlogs: "모든 블로그로 돌아가기",
    popularTags: "인기 태그",
    tagStats: "태그 통계",
    articlesWithTag: "태그된 기사",
    totalTags: "총 태그 수",
    mostUsedTag: "가장 많이 사용된 태그",
    readMore: "더 읽기 →",
    featured: "추천",
    noArticles: "이 태그의 기사가 없습니다."
  },
  zh: {
    articlesTagged: "标记的文章",
    article: "文章",
    articles: "文章",
    withThisTag: "带有此标签",
    tag: "标签",
    backToAllBlogs: "返回所有博客",
    popularTags: "热门标签",
    tagStats: "标签统计",
    articlesWithTag: "带标签的文章",
    totalTags: "标签总数",
    mostUsedTag: "最常用标签",
    readMore: "阅读更多 →",
    featured: "精选",
    noArticles: "未找到带有此标签的文章。"
  }
};

const t = translations[lang] || {
  articlesTagged: "Articles tagged",
  article: "article",
  articles: "articles",
  withThisTag: "with this tag",
  tag: "Tag",
  backToAllBlogs: "Back to All Blogs",
  popularTags: "Popular Tags",
  tagStats: "Tag Stats",
  articlesWithTag: "Articles with tag",
  totalTags: "Total tags",
  mostUsedTag: "Most used tag",
  readMore: "Read more →",
  featured: "FEATURED",
  noArticles: "No articles found with this tag."
};
---

<BaseLayout
  title={`${t.articlesTagged} "${tagDisplay}" - ${SITE_CONFIG.title}`}
  description={`Browse all articles tagged with "${tagDisplay}" on ${SITE_CONFIG.title}`}
  siteName="CalendHub Blog"
  currentLanguage={lang}
  pageType="blog-tag"
  pageIdentifier={urlTag}
>
  <div class="container py-12">
    <div class="grid lg:grid-cols-[1fr,320px] gap-12">
      <!-- Main Content -->
      <div>
        <!-- Header -->
        <div class="mb-8">
          <div class="flex items-center gap-3 mb-4">
            <a href={`${languagePrefix}/blog`} class="text-text-muted hover:text-text transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                <polyline points="9 22 9 12 15 12 15 22"></polyline>
              </svg>
            </a>
            <span class="text-text-muted">/</span>
            <span class="text-text-muted">{t.tag}</span>
            <span class="text-text-muted">/</span>
            <span class="font-medium">#{tagDisplay}</span>
          </div>
          <h1 class="text-3xl font-display font-bold mb-2">
            {t.articlesTagged} "{tagDisplay}"
          </h1>
          <p class="text-text-muted">
            {sortedPosts.length} {sortedPosts.length === 1 ? t.article : t.articles} {t.withThisTag}
          </p>
        </div>

        <!-- Posts List -->
        {sortedPosts.length > 0 ? (
          <div class="space-y-8">
            {sortedPosts.map((post) => (
              <article class="border-b pb-8">
                <a href={`${languagePrefix}/blog/${post.slug}`} class="block group">
                  <div class="flex gap-6">
                    {/* Thumbnail */}
                    {post.data.heroImage && (
                      <div class="w-48 h-32 flex-shrink-0 overflow-hidden rounded-lg">
                        <img
                          src={post.data.heroImage}
                          alt={post.data.heroImageAlt || `${post.data.title} - Tutorial tagged with ${tagDisplay}`}
                          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                          loading="lazy"
                        />
                      </div>
                    )}

                    {/* Content */}
                    <div class="flex-1 min-w-0">
                      <div class="flex items-center gap-2 text-xs text-text-muted mb-3">
                        <span class="font-bold uppercase">{post.data.category}</span>
                        <span>•</span>
                        <span>{formatDate(post.data.publishDate)}</span>
                        {post.data.featured && (
                          <>
                            <span>•</span>
                            <span class="px-2 py-0.5 bg-text text-background text-xs rounded">{t.featured}</span>
                          </>
                        )}
                      </div>

                      <h2 class="text-xl font-semibold mb-2 group-hover:opacity-70 transition-opacity">
                        {post.data.title}
                      </h2>

                      <p class="text-sm text-text-muted mb-3 line-clamp-2">
                        {post.data.description}
                      </p>

                      <div class="flex items-center justify-between">
                        <div class="flex flex-wrap gap-2">
                          {(post.data.tags || []).slice(0, 4).map((postTag) => (
                            <a
                              href={`${languagePrefix}/blog/tag/${normalizeTagName(postTag)}`}
                              class={`text-xs ${normalizeTagName(postTag) === urlTag ? 'text-text font-medium' : 'text-text-muted hover:text-text'}`}
                            >
                              #{postTag}
                            </a>
                          ))}
                        </div>
                        <span class="text-sm text-text-muted group-hover:text-text transition-colors">
                          {t.readMore}
                        </span>
                      </div>
                    </div>
                  </div>
                </a>
              </article>
            ))}
          </div>
        ) : (
          <div class="text-center py-12 border border-border rounded-lg">
            <p class="text-text-muted mb-4">{t.noArticles}</p>
            <a href={`${languagePrefix}/blog`} class="inline-flex items-center gap-2 px-4 py-2 border border-border rounded-full hover:bg-surface transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="19" y1="12" x2="5" y2="12"></line>
                <polyline points="12 19 5 12 12 5"></polyline>
              </svg>
              {t.backToAllBlogs}
            </a>
          </div>
        )}
      </div>

      <!-- Sidebar -->
      <aside class="space-y-8 lg:sticky lg:top-8 lg:h-fit">
        <!-- Back to Home -->
        <div>
          <a href={`${languagePrefix}/blog`} class="inline-flex items-center gap-2 px-4 py-2 border border-border rounded-full text-text hover:bg-text hover:text-background transition-all text-sm font-medium w-full justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="19" y1="12" x2="5" y2="12"></line>
              <polyline points="12 19 5 12 12 5"></polyline>
            </svg>
            {t.backToAllBlogs}
          </a>
        </div>

        <!-- Related Tags -->
        <div>
          <h3 class="text-sm font-bold uppercase mb-4">{t.popularTags}</h3>
          <div class="flex flex-wrap gap-2">
            {popularTags.map((tagName) => {
              const isActive = normalizeTagName(tagName) === urlTag;
              const count = normalizedTagCounts.get(normalizeTagName(tagName)) || 0;
              return (
                <a
                  href={`${languagePrefix}/blog/tag/${normalizeTagName(tagName)}`}
                  class={`px-3 py-1 text-sm border border-border rounded-full transition-all ${
                    isActive ? 'bg-text text-background' : 'hover:bg-text hover:text-background'
                  }`}
                >
                  #{tagName} ({count})
                </a>
              );
            })}
          </div>
        </div>

        <!-- Stats -->
        <div class="border-t pt-8">
          <h3 class="text-sm font-bold uppercase mb-4">{t.tagStats}</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-sm text-text-muted">{t.articlesWithTag}</span>
              <span class="text-sm font-medium">{sortedPosts.length}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-sm text-text-muted">{t.totalTags}</span>
              <span class="text-sm font-medium">{tagsData.length}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-sm text-text-muted">{t.mostUsedTag}</span>
              <span class="text-sm font-medium">
                {popularTags[0] || 'N/A'}
              </span>
            </div>
          </div>
        </div>
      </aside>
    </div>
  </div>
</BaseLayout>
