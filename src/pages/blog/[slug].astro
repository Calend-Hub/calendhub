---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { formatDate, calculateReadingTime } from '../../lib/utils';
import PostCard from '../../components/blog/PostCard.astro';
import BlogCTA from '../../components/blog/BlogCTA.astro';
import ProductCTA from '../../components/blog/ProductCTA.astro';
import BlogSidebar from '../../components/blog/BlogSidebar.astro';
import { SITE_CONFIG } from '../../data/site-config';
import { getBlogPost, getPublishedBlogPosts, getAllBlogPosts, getAvailableLanguagesForPost } from '../../lib/posts';
import { normalizeTagName } from '../../lib/tags';
import { DEFAULT_LANGUAGE } from '../../config/languages';
import { marked } from 'marked';
import fs from 'fs/promises';
import path from 'path';


// Enable prerendering for this page
export const prerender = true;

// Static paths for all blog posts
export async function getStaticPaths() {
  const posts = await getAllBlogPosts();
  return posts.map(post => ({
    params: { slug: post.slug }
  }));
}

// Get the slug from the URL
const { slug } = Astro.params;

// Get the specific post
const post = await getBlogPost(slug);

if (!post) {
  return new Response(null, {
    status: 404,
    statusText: 'Post not found'
  });
}

// Convert markdown to HTML
const contentHtml = marked(post.body);

// Split content for mid-article CTA injection (after ~40% of content)
const splitContentForCTA = (html: string) => {
  const paragraphs = html.split(/<\/p>/gi);
  const totalParagraphs = paragraphs.length;
  const splitPoint = Math.floor(totalParagraphs * 0.4); // Insert after 40% of content

  const beforeCTA = paragraphs.slice(0, splitPoint).join('</p>') + '</p>';
  const afterCTA = paragraphs.slice(splitPoint).join('</p>');

  return { beforeCTA, afterCTA };
};

const { beforeCTA, afterCTA } = splitContentForCTA(contentHtml);

// Get author information
let authorInfo = null;
try {
  const authorsPath = path.join(process.cwd(), 'public', 'data', 'authors', 'authors.json');
  const authorsData = JSON.parse(await fs.readFile(authorsPath, 'utf-8'));
  authorInfo = authorsData.authors.find(a => a.id === post.data.author) || null;
} catch (e) {
  console.error('Error loading author:', e);
}

// Get related posts (same category)
const allPosts = await getPublishedBlogPosts();
const relatedPosts = allPosts.filter(p => 
  p.data.category === post.data.category && 
  p.slug !== post.slug
);
const relatedPostsLimited = relatedPosts.slice(0, 3);
const featuredPost = allPosts.find(p => p.data.featured && p.slug !== post.slug) || 
                     allPosts.find(p => p.slug !== post.slug);

const readingTime = calculateReadingTime(post.body);

// Get available languages for this post (for hreflang tags)
const availableLanguages = await getAvailableLanguagesForPost(slug);

const articleData = {
  publishedTime: post.data.publishDate,
  modifiedTime: post.data.updateDate,
  author: post.data.author,
  tags: post.data.tags,
};
---

<BaseLayout
  title={post.data.seoTitle || post.data.title}
  description={post.data.seoDescription || post.data.description}
  ogImage={post.data.ogImage || post.data.heroImage}
  article={articleData}
  noindex={post.data.noindex}
  breadcrumb={[
    { name: 'Blog', url: '/blog' },
    { name: post.data.category, url: `/blog/category/${post.data.category.toLowerCase()}` },
    { name: post.data.title, url: `/blog/${post.slug}` }
  ]}
  siteName="CalendHub Blog"
  currentLanguage={DEFAULT_LANGUAGE}
  availableLanguages={availableLanguages}
  currentSlug={slug}
>
  <div class="container py-12">
    <div class="grid lg:grid-cols-[1fr,320px] gap-12">
      <!-- Main Content -->
      <article class="max-w-none">
    <!-- Breadcrumb -->
    <div class="flex items-center gap-3 mb-6">
      <a href="/blog" class="text-text-muted hover:text-text transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path>
          <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path>
        </svg>
      </a>
      <span class="text-text-muted">/</span>
      <a href={`/blog/category/${post.data.category.toLowerCase()}`} class="text-text-muted hover:text-text transition-colors">
        {post.data.category}
      </a>
      <span class="text-text-muted">/</span>
      <span class="font-medium text-sm truncate max-w-xs">{post.data.title}</span>
    </div>
    
    <!-- Article Header -->
    <header class="mb-8">
      <div class="flex items-center gap-2 text-sm text-text-muted mb-4">
        <span class="font-bold uppercase">{post.data.category}</span>
        <span>•</span>
        <time datetime={post.data.publishDate.toISOString()}>
          {formatDate(post.data.publishDate)}
        </time>
        <span>•</span>
        <span>{readingTime} min read</span>
      </div>
      
      <h1 class="text-4xl font-display font-bold mb-4 text-balance">
        {post.data.title}
      </h1>
      
      <p class="text-lg text-text-muted">
        {post.data.description}
      </p>
    </header>
    
    {/* Hero Image */}
    {post.data.heroImage && (
      <div class="mb-8 rounded-lg overflow-hidden">
        <img
          src={post.data.heroImage}
          alt={post.data.heroImageAlt || `${post.data.title} - Complete ${post.data.category} guide and tutorial`}
          class="w-full h-auto"
        />
      </div>
    )}
    
    {/* Article Content - Part 1 */}
    <div class="prose-custom" set:html={beforeCTA} />

    {/* Mid-Article CTA */}
    <ProductCTA />

    {/* Article Content - Part 2 */}
    <div class="prose-custom" set:html={afterCTA} />

    {/* Bottom CTA Section */}
    <BlogCTA />

    {/* Tags */}
    {(post.data.tags || []).length > 0 && (
      <div class="mt-8 pt-8 border-t">
        <div class="flex flex-wrap gap-2">
          {(post.data.tags || []).map((tag) => (
            <a
              href={`/blog/tag/${normalizeTagName(tag)}`}
              class="px-3 py-1 bg-surface rounded-full text-sm hover:bg-border transition-colors"
            >
              #{tag}
            </a>
          ))}
        </div>
      </div>
    )}

    {/* Related Posts */}
    {relatedPostsLimited.length > 0 && (
      <div class="mt-12 pt-12 border-t">
        <h3 class="text-2xl font-semibold mb-8 text-center">Related Articles</h3>
        <div class="grid md:grid-cols-3 gap-6">
          {relatedPostsLimited.map((relatedPost) => (
            <a href={`/blog/${relatedPost.slug}`} class="block group">
              <div class="border border-border rounded-xl overflow-hidden hover:bg-surface transition-colors">
                {relatedPost.data.heroImage && (
                  <div class="aspect-video overflow-hidden">
                    <img
                      src={relatedPost.data.heroImage}
                      alt={relatedPost.data.heroImageAlt || `${relatedPost.data.title} - Related ${relatedPost.data.category} tutorial`}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                  </div>
                )}
                <div class="p-4">
                  <div class="text-xs text-text-muted mb-2">
                    {relatedPost.data.category} • {formatDate(relatedPost.data.publishDate)}
                  </div>
                  <h4 class="text-sm font-semibold mb-2 group-hover:opacity-70 transition-opacity line-clamp-2">
                    {relatedPost.data.title}
                  </h4>
                  <p class="text-xs text-text-muted line-clamp-3">
                    {relatedPost.data.description}
                  </p>
                  <div class="flex flex-wrap gap-1 mt-3">
                    {(relatedPost.data.tags || []).slice(0, 2).map((tag) => (
                      <span class="px-2 py-1 text-xs bg-border rounded-full">
                        #{tag}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    )}

      </article>

      <!-- Sidebar -->
      <BlogSidebar post={post} readingTime={readingTime} language={DEFAULT_LANGUAGE} />
    </div>
  </div>

  <!-- Article Schema for SEO -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": post.data.title,
    "description": post.data.description,
    "image": post.data.heroImage ? `${SITE_CONFIG.url}${post.data.heroImage}` : `${SITE_CONFIG.url}/og-image.png`,
    "datePublished": post.data.publishDate.toISOString(),
    "dateModified": post.data.updateDate ? post.data.updateDate.toISOString() : post.data.publishDate.toISOString(),
    "author": {
      "@type": authorInfo ? "Person" : "Organization",
      "name": authorInfo?.name || "CalendHub Team",
      "url": authorInfo ? `${SITE_CONFIG.url}/author/${post.data.author}` : SITE_CONFIG.url,
      ...(authorInfo?.avatar && { "image": authorInfo.avatar })
    },
    "publisher": {
      "@type": "Organization",
      "name": "CalendHub",
      "url": SITE_CONFIG.url,
      "logo": {
        "@type": "ImageObject",
        "url": `${SITE_CONFIG.url}/favicon.svg`
      }
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": `${SITE_CONFIG.url}/blog/${post.slug}`
    },
    "articleSection": post.data.category,
    "keywords": post.data.tags.join(", "),
    "wordCount": post.body.split(/\s+/).length,
    "timeRequired": `PT${readingTime}M`,
    "inLanguage": "en-US"
  })} />

  <!-- FAQ Schema for common blog post questions -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [
      {
        "@type": "Question",
        "name": `What will I learn from this ${post.data.category.toLowerCase()} tutorial?`,
        "acceptedAnswer": {
          "@type": "Answer",
          "text": `${post.data.description} This comprehensive guide covers all the essential concepts and practical steps you need to master ${post.data.category.toLowerCase()}.`
        }
      },
      {
        "@type": "Question",
        "name": `Is this ${post.data.category.toLowerCase()} tutorial suitable for beginners?`,
        "acceptedAnswer": {
          "@type": "Answer",
          "text": `This tutorial is designed to be accessible for learners at various skill levels. We provide clear explanations and step-by-step instructions to help you understand ${post.data.category.toLowerCase()} concepts effectively.`
        }
      },
      {
        "@type": "Question",
        "name": `How long does it take to complete this ${post.data.category.toLowerCase()} tutorial?`,
        "acceptedAnswer": {
          "@type": "Answer",
          "text": `This tutorial has an estimated reading time of ${readingTime} minutes. However, we recommend taking additional time to practice the concepts and techniques covered to fully master the material.`
        }
      },
      {
        "@type": "Question",
        "name": `Where can I find more ${post.data.category.toLowerCase()} tutorials and resources?`,
        "acceptedAnswer": {
          "@type": "Answer",
          "text": `You can find more ${post.data.category.toLowerCase()} tutorials in our ${post.data.category} category section. We also recommend exploring our related articles and following our blog for the latest updates on ${post.data.category.toLowerCase()} techniques and best practices.`
        }
      }
    ]
  })} />
</BaseLayout>