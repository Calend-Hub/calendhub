---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/blog/PostCard.astro';
import { sortPostsByDate, formatDate } from '../../lib/utils';
import { SITE_CONFIG } from '../../data/site-config';
import { getCategories, getTags } from '../../lib/data';
import { getPublishedBlogPosts } from '../../lib/posts';
import { normalizeTagName } from '../../lib/tags';
import { DEFAULT_LANGUAGE } from '../../config/languages';

// Get all non-draft posts from both locations
const allPosts = await getPublishedBlogPosts();

// Sort posts: featured first, then by date
const sortedPosts = sortPostsByDate(allPosts).sort((a, b) => {
  // Featured posts come first
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  // Then sort by date (already sorted by sortPostsByDate)
  return 0;
});

// Pagination settings
const POSTS_PER_PAGE = 15;
const currentPage = 1;
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
const paginatedPosts = sortedPosts.slice(0, POSTS_PER_PAGE);

const featuredPosts = sortedPosts.filter(post => post.data.featured);
const latestPost = sortedPosts.length > 0 ? sortedPosts[0] : null;
const recentPosts = sortedPosts.slice(1, 7);

// Get categories from data
const categoriesData = await getCategories();
const categories = categoriesData.map(cat => cat.name);

// Function imported from lib/tags.ts

// Get tags from data and count their usage with normalization
const tagsData = await getTags();
const allPostTags = allPosts.flatMap(post => post.data.tags || []);

// Create normalized tag counts
const normalizedTagCounts = new Map();
allPostTags.forEach(tag => {
  const normalized = normalizeTagName(tag);
  normalizedTagCounts.set(normalized, (normalizedTagCounts.get(normalized) || 0) + 1);
});

// Get all tags and sort by usage using normalized matching
const popularTags = tagsData
  .map(tag => ({
    name: tag.name, // Use the canonical name from JSON file
    count: normalizedTagCounts.get(normalizeTagName(tag.name)) || 0
  }))
  .filter(tag => tag.count > 0) // Only show tags that are actually used
  .sort((a, b) => b.count - a.count)
  .slice(0, 10)
  .map(tag => tag.name);

// Stats
const totalPosts = allPosts.length;
const totalCategories = categories.length;

// AI-related categories
const aiCategories = ['AI', 'LLMs', 'Image Generation', 'Video Generation', 'Programming', 'Machine Learning'];
---

<BaseLayout
  siteName="CalendHub Blog"
  currentLanguage={DEFAULT_LANGUAGE}
  pageType="blog-index"
>
  <div class="min-h-screen">
    <!-- Compact Blog Header -->
    <section class="py-12 bg-gradient-to-b from-orange-500/5 to-background">
      <div class="container">
        <div class="max-w-4xl">
          <div class="inline-flex items-center gap-2 bg-orange-500/10 border border-orange-500/20 rounded-full px-4 py-2 text-sm font-medium text-orange-600 dark:text-orange-400 mb-6">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            <span>Resources & Insights</span>
          </div>
          <h1 class="text-5xl md:text-6xl font-display font-bold mb-3">
            CalendHub Blog
          </h1>
          <p class="text-lg text-text-muted">
            Master your calendar, boost productivity, and reclaim your time with expert tips, guides, and scheduling strategies.
          </p>
        </div>
      </div>
    </section>

    <!-- Main Blog Layout -->
    <section class="py-12">
      <div class="container">
        <div class="grid lg:grid-cols-[1fr,320px] gap-12">
          <!-- Left Column - Blog Posts -->
          <div>
            <!-- All Posts List -->
            {paginatedPosts.length > 0 ? (
              <div class="space-y-8">
                {paginatedPosts.map((post) => (
                <article class="border-b pb-8">
                  <a href={`/blog/${post.slug}`} class="block group">
                    <div class="grid md:grid-cols-[160px,1fr] gap-4">
                      {post.data.heroImage && (
                        <div class="overflow-hidden rounded-lg aspect-[16/9] md:aspect-[4/3] bg-surface">
                          <img
                            src={post.data.heroImage}
                            alt={post.data.heroImageAlt || `${post.data.title} - ${post.data.category} tutorial and guide`}
                            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                            loading="lazy"
                          />
                        </div>
                      )}
                      
                      <div class={post.data.heroImage ? "" : "md:col-span-2"}>
                        <div class="flex items-center gap-2 text-xs text-text-muted mb-2">
                          <span class="font-bold uppercase">{post.data.category}</span>
                          <span>•</span>
                          <span>{formatDate(post.data.publishDate)}</span>
                          {post.data.featured && (
                            <>
                              <span>•</span>
                              <span class="px-2 py-0.5 bg-orange-600 text-white text-xs rounded-full">FEATURED</span>
                            </>
                          )}
                        </div>
                        
                        <h2 class="text-xl font-semibold mb-2 group-hover:opacity-70 transition-opacity">
                          {post.data.title}
                        </h2>
                        
                        <p class="text-sm text-text-muted mb-3 line-clamp-2">
                          {post.data.description}
                        </p>
                        
                        <div class="flex items-center justify-between">
                          <div class="flex flex-wrap gap-2">
                            {(post.data.tags || []).slice(0, 3).map((tag) => (
                              <span class="text-xs text-text-muted">
                                #{tag}
                              </span>
                            ))}
                          </div>
                          <span class="text-xs text-orange-600 dark:text-orange-400 group-hover:text-orange-700 dark:group-hover:text-orange-500 transition-colors font-semibold">
                            Read more →
                          </span>
                        </div>
                      </div>
                    </div>
                  </a>
                </article>
                ))}
              </div>
            ) : (
              <div class="border border-border rounded-lg p-8 text-center">
                <p class="text-text-muted mb-4">No blog posts yet.</p>
                <p class="text-sm text-text-muted">Check back soon for content!</p>
              </div>
            )}
            
            <!-- Pagination -->
            {totalPages > 1 && (
              <div class="mt-12 flex items-center justify-center gap-2">
                <button 
                  disabled 
                  class="px-4 py-2 border border-border rounded-lg text-text-muted cursor-not-allowed opacity-50"
                >
                  ← Previous
                </button>
                
                <div class="flex items-center gap-2">
                  <span class="px-4 py-2 bg-orange-600 text-white rounded-lg">1</span>
                  {Array.from({ length: Math.min(totalPages - 1, 4) }, (_, i) => i + 2).map(page => (
                    <a 
                      href={`/page/${page}`}
                      class="px-4 py-2 border border-border rounded-lg hover:bg-surface transition-colors"
                    >
                      {page}
                    </a>
                  ))}
                  {totalPages > 5 && (
                    <>
                      <span class="px-2">...</span>
                      <a 
                        href={`/page/${totalPages}`}
                        class="px-4 py-2 border border-border rounded-lg hover:bg-surface transition-colors"
                      >
                        {totalPages}
                      </a>
                    </>
                  )}
                </div>
                
                {totalPages > 1 && (
                  <a 
                    href="/page/2"
                    class="px-4 py-2 border border-border rounded-lg hover:bg-surface transition-colors"
                  >
                    Next →
                  </a>
                )}
              </div>
            )}
          </div>
          
          <!-- Right Column - Sidebar -->
          <aside class="space-y-8 lg:sticky lg:top-8 lg:h-fit">
            <!-- Categories -->
            <div>
              <h3 class="text-sm font-bold uppercase mb-4">Categories</h3>
              <div class="space-y-2">
                {categoriesData.map((category) => {
                  const count = allPosts.filter(p => p.data.category === category.name).length;
                  return (
                    <a href={`/blog/category/${category.slug}`} class="flex items-center justify-between py-2 px-3 border border-border rounded-full hover:border-orange-500/50 hover:bg-orange-500/5 transition-colors">
                      <span class="text-sm">{category.name}</span>
                      <span class="text-xs text-orange-600 dark:text-orange-400 font-semibold">{count}</span>
                    </a>
                  );
                })}
              </div>
            </div>
            
            <!-- Popular Tags -->
            <div>
              <h3 class="text-sm font-bold uppercase mb-4">Popular Tags</h3>
              <div class="flex flex-wrap gap-2">
                {popularTags.map((tag) => (
                  <a href={`/blog/tag/${normalizeTagName(tag)}`} class="px-3 py-1 text-sm border border-border rounded-full hover:border-orange-500 hover:bg-orange-500 hover:text-white transition-all">
                    #{tag}
                  </a>
                ))}
              </div>
            </div>
            
            <!-- Stats -->
            <div class="border-t pt-8">
              <h3 class="text-sm font-bold uppercase mb-4">Stats</h3>
              <div class="space-y-3">
                <div class="flex justify-between">
                  <span class="text-sm text-text-muted">Total Articles</span>
                  <span class="text-sm font-medium">{totalPosts}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-text-muted">Categories</span>
                  <span class="text-sm font-medium">{totalCategories}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-sm text-text-muted">Tags</span>
                  <span class="text-sm font-medium">{tagsData.length}</span>
                </div>
              </div>
            </div>
            
            <!-- Featured Posts -->
            {featuredPosts.length > 0 && (
              <div class="border-t pt-8">
                <h3 class="text-sm font-bold uppercase mb-4">Featured Articles</h3>
                <div class="space-y-4">
                  {featuredPosts.slice(0, 1).map((post) => (
                    <a href={`/blog/${post.slug}`} class="block group">
                      <div class="border border-border rounded-xl overflow-hidden hover:bg-surface transition-colors">
                        {post.data.heroImage && (
                          <div class="aspect-video overflow-hidden">
                            <img 
                              src={post.data.heroImage} 
                              alt={post.data.heroImageAlt || `${post.data.title} - Featured ${post.data.category} article`}
                              class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                            />
                          </div>
                        )}
                        <div class="p-4">
                          <div class="text-xs text-text-muted mb-2">
                            {post.data.category}
                          </div>
                          <h3 class="text-sm font-semibold mb-2 group-hover:opacity-70 transition-opacity">
                            {post.data.title}
                          </h3>
                          <p class="text-xs text-text-muted line-clamp-3">
                            {post.data.description}
                          </p>
                        </div>
                      </div>
                    </a>
                  ))}
                </div>
              </div>
            )}
          </aside>
        </div>
      </div>
    </section>

  </div>
</BaseLayout>