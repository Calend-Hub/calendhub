---
import { SITE_CONFIG } from '../../data/site-config';
import { DEFAULT_LANGUAGE, SUPPORTED_LANGUAGES, getLanguagePrefix } from '../../config/languages';

export interface Props {
  title: string;
  description: string;
  ogImage?: string;
  article?: {
    publishedTime?: Date;
    modifiedTime?: Date;
    author?: string;
    tags?: string[];
  };
  noindex?: boolean;
  breadcrumb?: Array<{
    name: string;
    url: string;
  }>;
  currentLanguage?: string;
  availableLanguages?: string[];
  currentSlug?: string;
  pageType?: 'blog-post' | 'blog-index' | 'blog-tag' | 'blog-category';
  pageIdentifier?: string; // For tags/categories: the tag or category name
}

const {
  title,
  description,
  ogImage = SITE_CONFIG.ogImage,
  article,
  noindex = false,
  breadcrumb,
  currentLanguage = DEFAULT_LANGUAGE,
  availableLanguages = [],
  currentSlug,
  pageType,
  pageIdentifier,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, SITE_CONFIG.url);
const ogImageURL = new URL(ogImage, SITE_CONFIG.url);

const fullTitle = title === SITE_CONFIG.title
  ? title
  : `${title} | ${SITE_CONFIG.title}`;

// Generate hreflang URLs for multilingual support
const hreflangs: Array<{ lang: string; url: string }> = [];

// Determine if we should generate hreflang tags based on page type
const shouldGenerateHreflang = pageType || (currentSlug && availableLanguages.length > 0);

if (shouldGenerateHreflang) {
  // Determine which languages to include
  const languages = availableLanguages.length > 0 ? availableLanguages : SUPPORTED_LANGUAGES;

  // Generate hreflang for each language based on page type
  for (const lang of languages) {
    const prefix = getLanguagePrefix(lang);
    let url = '';

    if (pageType === 'blog-index') {
      url = `${SITE_CONFIG.url}${prefix}/blog`;
    } else if (pageType === 'blog-tag' && pageIdentifier) {
      url = `${SITE_CONFIG.url}${prefix}/blog/tag/${pageIdentifier}`;
    } else if (pageType === 'blog-category' && pageIdentifier) {
      url = `${SITE_CONFIG.url}${prefix}/blog/category/${pageIdentifier}`;
    } else if (currentSlug) {
      // Blog post (legacy support)
      url = `${SITE_CONFIG.url}${prefix}/blog/${currentSlug}`;
    }

    if (url) {
      hreflangs.push({ lang, url });
    }
  }

  // Add x-default (fallback to English/default language)
  if (hreflangs.length > 0) {
    let defaultUrl = '';

    if (pageType === 'blog-index') {
      defaultUrl = `${SITE_CONFIG.url}/blog`;
    } else if (pageType === 'blog-tag' && pageIdentifier) {
      defaultUrl = `${SITE_CONFIG.url}/blog/tag/${pageIdentifier}`;
    } else if (pageType === 'blog-category' && pageIdentifier) {
      defaultUrl = `${SITE_CONFIG.url}/blog/category/${pageIdentifier}`;
    } else if (currentSlug) {
      defaultUrl = `${SITE_CONFIG.url}/blog/${currentSlug}`;
    }

    if (defaultUrl) {
      hreflangs.push({ lang: 'x-default', url: defaultUrl });
    }
  }
}
---

<!-- Primary Meta Tags -->
<title>{fullTitle}</title>
<meta name="title" content={fullTitle} />
<meta name="description" content={description} />
<link rel="canonical" href={canonicalURL} />

<!-- Hreflang Tags for Multilingual SEO -->
{hreflangs.length > 0 && hreflangs.map(({ lang, url }) => (
  <link rel="alternate" hreflang={lang} href={url} />
))}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={article ? 'article' : 'website'} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={fullTitle} />
<meta property="og:description" content={description} />
<meta property="og:image" content={ogImageURL} />
<meta property="og:site_name" content={SITE_CONFIG.title} />
<meta property="og:locale" content={currentLanguage === 'en' ? 'en_US' : currentLanguage === 'es' ? 'es_ES' : currentLanguage === 'fr' ? 'fr_FR' : currentLanguage === 'de' ? 'de_DE' : currentLanguage === 'ja' ? 'ja_JP' : currentLanguage === 'ko' ? 'ko_KR' : currentLanguage === 'zh' ? 'zh_CN' : SITE_CONFIG.locale} />

<!-- Alternate locales for Open Graph -->
{availableLanguages.length > 0 && availableLanguages
  .filter(lang => lang !== currentLanguage)
  .map(lang => {
    const locale = lang === 'en' ? 'en_US' : lang === 'es' ? 'es_ES' : lang === 'fr' ? 'fr_FR' : lang === 'de' ? 'de_DE' : lang === 'ja' ? 'ja_JP' : lang === 'ko' ? 'ko_KR' : lang === 'zh' ? 'zh_CN' : lang;
    return <meta property="og:locale:alternate" content={locale} />;
  })
}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={fullTitle} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={ogImageURL} />
{SITE_CONFIG.social.twitter && (
  <meta property="twitter:creator" content={`@${SITE_CONFIG.social.twitter}`} />
)}

<!-- Article specific -->
{article && (
  <>
    {article.publishedTime && (
      <meta property="article:published_time" content={article.publishedTime.toISOString()} />
    )}
    {article.modifiedTime && (
      <meta property="article:modified_time" content={article.modifiedTime.toISOString()} />
    )}
    {article.author && (
      <meta property="article:author" content={article.author} />
    )}
    {article.tags && article.tags.map(tag => (
      <meta property="article:tag" content={tag} />
    ))}
  </>
)}

<!-- Robots -->
{noindex && <meta name="robots" content="noindex, nofollow" />}

<!-- JSON-LD Schema -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": article ? "BlogPosting" : "WebSite",
  "name": fullTitle,
  "description": description,
  "url": canonicalURL.toString(),
  ...(article && {
    "headline": title,
    "datePublished": article.publishedTime?.toISOString(),
    "dateModified": article.modifiedTime?.toISOString() || article.publishedTime?.toISOString(),
    "author": {
      "@type": "Person",
      "name": article.author || SITE_CONFIG.author,
    },
    "publisher": {
      "@type": "Organization",
      "name": SITE_CONFIG.title,
      "logo": {
        "@type": "ImageObject",
        "url": new URL("/favicon.png", SITE_CONFIG.url).toString(),
      },
    },
    "image": ogImageURL.toString(),
    "keywords": article.tags?.join(", "),
  }),
})} />

<!-- BreadcrumbList Schema -->
{breadcrumb && breadcrumb.length > 0 && (
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": breadcrumb.map((item, index) => ({
      "@type": "ListItem",
      "position": index + 1,
      "name": item.name,
      "item": new URL(item.url, SITE_CONFIG.url).toString()
    }))
  })} />
)}